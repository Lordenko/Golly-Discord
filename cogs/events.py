import asyncio
import json
import os
import io
import matplotlib.pyplot as plt
from datetime import datetime, timedelta, time

import disnake
from disnake.ext import commands, tasks
from disnake import FFmpegPCMAudio
from utils.defs import knight_say


class EventsCog(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.history = {}
        self.data_file = "activity_data.json"
        # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–∏—Ö: –∫–ª—é—á ‚Äì id –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (—Ä—è–¥–æ–∫), –∑–Ω–∞—á–µ–Ω–Ω—è ‚Äì —Å–ª–æ–≤–Ω–∏–∫ –∑ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—é
        self.activity_data = {}
        # –î–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è —á–∞—Å—É –ø—Ä–∏—î–¥–Ω–∞–Ω–Ω—è –¥–æ –≥–æ–ª–æ—Å–æ–≤–∏—Ö –∫–∞–Ω–∞–ª—ñ–≤
        self.voice_start = {}
        # –î–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —â–æ–¥–µ–Ω–Ω–æ—ó –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ (–Ω–µ –∑–±–µ—Ä—ñ–≥–∞—î—Ç—å—Å—è —É —Ñ–∞–π–ª, –ª–∏—à–µ –≤ –æ–ø–µ—Ä–∞—Ç–∏–≤—Ü—ñ)
        self.daily_activity = {}
        self.load_data()

        # –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á: —Å–∫–∏–¥–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö —Ç–∞ –ø–µ—Ä—ñ–æ–¥–∏—á–Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
        self.reset_daily.start()
        self.reset_monthly.start()
        self.save_data_loop.start()

    def load_data(self):
        if os.path.exists(self.data_file):
            with open(self.data_file, "r", encoding="utf-8") as f:
                self.activity_data = json.load(f)
        else:
            self.activity_data = {}

    def save_data(self):
        with open(self.data_file, "w", encoding="utf-8") as f:
            json.dump(self.activity_data, f, indent=4)

    @tasks.loop(minutes=1)
    async def save_data_loop(self):
        self.save_data()

    def cog_unload(self):
        self.reset_daily.cancel()
        self.reset_monthly.cancel()
        self.save_data_loop.cancel()
        self.save_data()

    @tasks.loop(hours=24)
    async def reset_daily(self):
        for key, data in self.activity_data.items():
            data['today'] = 0

    @tasks.loop(hours=24)
    async def reset_monthly(self):
        now = datetime.utcnow()
        if now.day == 1:
            for key, data in self.activity_data.items():
                data['month'] = 0

    @reset_daily.before_loop
    async def before_reset_daily(self):
        now = datetime.utcnow()
        target = datetime.combine(now.date(), time(0, 0)) + timedelta(days=1)
        sleep_time = (target - now).total_seconds()
        await asyncio.sleep(sleep_time)

    @reset_monthly.before_loop
    async def before_reset_monthly(self):
        now = datetime.utcnow()
        if now.month == 12:
            target = datetime(now.year + 1, 1, 1)
        else:
            target = datetime(now.year, now.month + 1, 1)
        sleep_time = (target - now).total_seconds()
        await asyncio.sleep(sleep_time)



    @commands.Cog.listener()
    async def on_voice_state_update(self, member, before, after):
        # –°–ø–µ—Ü–∏—Ñ—ñ—á–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –¥–ª—è –ø–µ–≤–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        if member.id == 366581917522591744:
            if not before.mute and after.mute:
                print(f"{member.display_name} –±—É–≤ –∑–∞–º'—é—á–µ–Ω–∏–π")
                await member.edit(mute=False)
            if not before.deaf and after.deaf:
                print(f"{member.display_name} –±—É–≤ –∑–∞–≥–ª—É—à–µ–Ω–∏–π")
                await member.edit(deafen=False)

        now = datetime.utcnow()
        # –í—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–∏ –≥–æ–ª–æ—Å–æ–≤–∏—Ö –∫–∞–Ω–∞–ª—ñ–≤
        if before.channel != after.channel:
            # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∏—Ö–æ–¥–∏—Ç—å –∑ –∫–∞–Ω–∞–ª—É ‚Äì —Ä–∞—Ö—É—î–º–æ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å —Å–µ—Å—ñ—ó
            if before.channel is not None:
                join_time = self.voice_start.pop(member.id, None)
                if join_time:
                    duration = (now - join_time).total_seconds() / 3600.0  # –≥–æ–¥–∏–Ω–∏
                    user_key = str(member.id)
                    data = self.activity_data.setdefault(user_key, {'today': 0, 'month': 0, 'total': 0, 'messages': 0})
                    data['today'] += duration
                    data['month'] += duration
                    data['total'] += duration

                    # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —â–æ–¥–µ–Ω–Ω–æ—ó –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
                    today_str = now.date().strftime("%Y-%m-%d")
                    if user_key not in self.daily_activity:
                        self.daily_activity[user_key] = {}
                    self.daily_activity[user_key][today_str] = self.daily_activity[user_key].get(today_str, 0) + duration

            # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø—Ä–∏—î–¥–Ω—É—î—Ç—å—Å—è –¥–æ –∫–∞–Ω–∞–ª—É ‚Äì –∑–±–µ—Ä—ñ–≥–∞—î–º–æ —á–∞—Å –≤—Ö–æ–¥—É
            if after.channel is not None:
                self.voice_start[member.id] = now

    @commands.Cog.listener()
    async def on_member_join(self, member):
        channel = member.guild.system_channel
        message = f'–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ, {member.mention}!\n'
        no_bot_message = '–¢–æ–±—ñ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–±—Ä–∞—Ç–∏ —Å–≤–æ—é –≥—Ä—É–ø—É –≤ <#1174023100392808478>'
        message = message + no_bot_message if not member.bot else message
        if channel:
            await channel.send(message)

    @commands.Cog.listener()
    async def on_member_remove(self, member):
        channel = member.guild.system_channel
        if channel:
            await channel.send(f'{member.mention} –ø–æ–∫–∏–Ω—É–≤ –Ω–∞—Å. –°—É–º—É–≤–∞—Ç–∏–º–µ–º–æ!')

    @commands.Cog.listener()
    async def on_message(self, message):
        # –†–∞—Ö—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å (—ñ–≥–Ω–æ—Ä—É—é—á–∏ –±–æ—Ç—ñ–≤)
        if not message.author.bot:
            user_key = str(message.author.id)
            data = self.activity_data.setdefault(user_key, {'today': 0, 'month': 0, 'total': 0, 'messages': 0})
            data['messages'] += 1

        connect_to_voice = True

        await knight_say(
            message=message,
            history=self.history,
            say='–∏–¥–∏ –Ω–∞—Ö—É–π',
            path_to_file='media/–∏–∑–≤–∏–Ω–∏—Å—å.ogg',
            bot=self.bot,
            connect_to_voice=connect_to_voice
        )

        await knight_say(
            message=message,
            history=self.history,
            say='–∂–µ–Ω—â–∏–Ω–∞',
            path_to_file='media/–∂–µ–Ω—â–∏–Ω–∞.ogg',
            bot=self.bot,
            connect_to_voice=connect_to_voice
        )

        await knight_say(
            message=message,
            history=self.history,
            say='–Ω–µ—Ç',
            path_to_file='media/–Ω–µ—Ç.ogg',
            bot=self.bot,
            connect_to_voice=connect_to_voice
        )

    def create_graph(self, member: disnake.Member, data: dict) -> io.BytesIO:
        """–ì–µ–Ω–µ—Ä—É—î –≥—Ä–∞—Ñ—ñ–∫ –≥–æ–ª–æ—Å–æ–≤–æ—ó –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—î –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è —É –≤–∏–≥–ª—è–¥—ñ BytesIO."""
        labels = ["Today", "Month", "Total"]
        values = [data.get("today", 0), data.get("month", 0), data.get("total", 0)]

        fig, ax = plt.subplots(figsize=(6, 4))
        bars = ax.bar(labels, values, color="#7289DA")  # –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –∫–æ–ª—å–æ—Ä—É, —â–æ –Ω–∞–≥–∞–¥—É—î Discord
        ax.set_ylabel("–ì–æ–¥–∏–Ω")
        ax.set_title(f"–ì–æ–ª–æ—Å–æ–≤–∞ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –¥–ª—è {member.display_name}")

        # –î–æ–¥–∞—î–º–æ –ø—ñ–¥–ø–∏—Å –∑–Ω–∞—á–µ–Ω–Ω—è –Ω–∞–¥ –∫–æ–∂–Ω–∏–º —Å—Ç–æ–≤–ø—á–∏–∫–æ–º
        for bar in bars:
            height = bar.get_height()
            ax.annotate(f"{height:.2f}",
                        xy=(bar.get_x() + bar.get_width() / 2, height),
                        xytext=(0, 3),
                        textcoords="offset points",
                        ha='center', va='bottom')

        fig.tight_layout()
        buf = io.BytesIO()
        plt.savefig(buf, format="png")
        buf.seek(0)
        plt.close(fig)
        return buf

    @commands.user_command(name="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    async def user_stats(self, inter: disnake.ApplicationCommandInteraction, member: disnake.Member = None):
        member = member or inter.author
        user_key = str(member.id)
        data = self.activity_data.get(user_key)
        if not data:
            await inter.response.send_message(f"–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –ø—Ä–æ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –¥–ª—è {member.display_name}.", ephemeral=True)
            return

        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ñ—É—Ç—É—Ä–∏—Å—Ç–∏—á–Ω–æ–≥–æ –≥—Ä–∞—Ñ—ñ–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ—ó –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
        graph_buffer = self.create_futuristic_graph(member, data)
        file = disnake.File(fp=graph_buffer, filename="graph.png")

        # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–ª—å–æ—Ä—É —Ä–æ–ª—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        member_color = member.color if member.color != disnake.Color.default() else disnake.Color(0x5865F2)

        # –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–∏—Ö
        today_hours = data.get('today', 0)
        month_hours = data.get('month', 0)
        total_hours = data.get('total', 0)

        # –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —á–∞—Å—É –≤ –≥–æ–¥–∏–Ω–∞—Ö —ñ —Ö–≤–∏–ª–∏–Ω–∞—Ö
        def format_time(hours):
            hours_int = int(hours)
            minutes = int((hours - hours_int) * 60)
            return f"{hours_int} –≥–æ–¥–∏–Ω {minutes} —Ö–≤–∏–ª–∏–Ω"

        # –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–µ–π—Ç–∏–Ω–≥—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
        activity_rank = self.get_activity_rank(member.id)
        rank_emojis = {1: "ü•á", 2: "ü•à", 3: "ü•â"}
        rank_emoji = rank_emojis.get(activity_rank, "üèÜ") if activity_rank <= 10 else "üë§"

        embed = disnake.Embed(
            title=f"{rank_emoji} –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ | {member.display_name}",
            color=member_color
        )

        # –î–æ–¥–∞–≤–∞–Ω–Ω—è –∞–≤–∞—Ç–∞—Ä—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        embed.set_thumbnail(url=member.display_avatar.url)

        # –ì–æ–ª–æ—Å–æ–≤–∞ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –±–µ–∑ –ø—Ä–æ–≥—Ä–µ—Å-–±–∞—Ä—ñ–≤
        embed.add_field(
            name="‚åõ –ß–∞—Å –≤ –≥–æ–ª–æ—Å–æ–≤–∏—Ö –∫–∞–Ω–∞–ª–∞—Ö",
            value=(
                f"**–°—å–æ–≥–æ–¥–Ω—ñ:** `{format_time(today_hours)}`\n"
                f"**–ó–∞ –º—ñ—Å—è—Ü—å:** `{format_time(month_hours)}`\n"
                f"**–í—Å—å–æ–≥–æ:** `{format_time(total_hours)}`\n"
            ),
            inline=False
        )

        # –¢–µ–∫—Å—Ç–æ–≤–∞ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å
        messages_count = data.get('messages', 0)
        embed.add_field(
            name="üí¨ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è",
            value=f"**–í—Å—å–æ–≥–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ:** `{messages_count}` –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å",
            inline=False
        )

        # –Ü–Ω—à—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–Ω—ñ –¥–∞–Ω—ñ (—è–∫—â–æ —î)
        if data.get('reactions', 0) > 0 or data.get('files', 0) > 0:
            embed.add_field(
                name="üîç –î–æ–¥–∞—Ç–∫–æ–≤–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
                value=(
                    f"**–†–µ–∞–∫—Ü—ñ—ó:** `{data.get('reactions', 0)}`\n" if data.get('reactions', 0) > 0 else ""
                                                                                                        f"**–§–∞–π–ª–∏:** `{data.get('files', 0)}`" if data.get(
                        'files', 0) > 0 else ""
                ),
                inline=False
            )

        embed.set_image(url="attachment://graph.png")
        embed.set_footer(text=f"ID: {member.id} ‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–Ω–æ–≤–ª—é—î—Ç—å—Å—è —â–æ—Ö–≤–∏–ª–∏–Ω–∏")

        await inter.response.send_message(embed=embed, file=file)

    @commands.slash_command(name="activity", description="–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –≥—Ä–∞—Ñ—ñ–∫–∞–º–∏")
    async def activity(self, inter: disnake.ApplicationCommandInteraction, member: disnake.Member = None):
        member = member or inter.author
        user_key = str(member.id)
        data = self.activity_data.get(user_key)
        if not data:
            await inter.response.send_message(f"–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –ø—Ä–æ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –¥–ª—è {member.display_name}.", ephemeral=True)
            return

        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ñ—É—Ç—É—Ä–∏—Å—Ç–∏—á–Ω–æ–≥–æ –≥—Ä–∞—Ñ—ñ–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ—ó –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
        graph_buffer = self.create_futuristic_graph(member, data)
        file = disnake.File(fp=graph_buffer, filename="graph.png")

        # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–ª—å–æ—Ä—É —Ä–æ–ª—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        member_color = member.color if member.color != disnake.Color.default() else disnake.Color(0x5865F2)

        # –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–∏—Ö
        today_hours = data.get('today', 0)
        month_hours = data.get('month', 0)
        total_hours = data.get('total', 0)

        # –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —á–∞—Å—É –≤ –≥–æ–¥–∏–Ω–∞—Ö —ñ —Ö–≤–∏–ª–∏–Ω–∞—Ö
        def format_time(hours):
            hours_int = int(hours)
            minutes = int((hours - hours_int) * 60)
            return f"{hours_int} –≥–æ–¥–∏–Ω {minutes} —Ö–≤–∏–ª–∏–Ω"

        # –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–µ–π—Ç–∏–Ω–≥—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
        activity_rank = self.get_activity_rank(member.id)
        rank_emojis = {1: "ü•á", 2: "ü•à", 3: "ü•â"}
        rank_emoji = rank_emojis.get(activity_rank, "üèÜ") if activity_rank <= 10 else "üë§"

        embed = disnake.Embed(
            title=f"{rank_emoji} –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ | {member.display_name}",
            color=member_color
        )

        # –î–æ–¥–∞–≤–∞–Ω–Ω—è –∞–≤–∞—Ç–∞—Ä—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        embed.set_thumbnail(url=member.display_avatar.url)

        # –ì–æ–ª–æ—Å–æ–≤–∞ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –±–µ–∑ –ø—Ä–æ–≥—Ä–µ—Å-–±–∞—Ä—ñ–≤
        embed.add_field(
            name="‚åõ –ß–∞—Å –≤ –≥–æ–ª–æ—Å–æ–≤–∏—Ö –∫–∞–Ω–∞–ª–∞—Ö",
            value=(
                f"**–°—å–æ–≥–æ–¥–Ω—ñ:** `{format_time(today_hours)}`\n"
                f"**–ó–∞ –º—ñ—Å—è—Ü—å:** `{format_time(month_hours)}`\n"
                f"**–í—Å—å–æ–≥–æ:** `{format_time(total_hours)}`\n"
            ),
            inline=False
        )

        # –¢–µ–∫—Å—Ç–æ–≤–∞ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å
        messages_count = data.get('messages', 0)
        embed.add_field(
            name="üí¨ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è",
            value=f"**–í—Å—å–æ–≥–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ:** `{messages_count}` –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å",
            inline=False
        )

        # –Ü–Ω—à—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–Ω—ñ –¥–∞–Ω—ñ (—è–∫—â–æ —î)
        if data.get('reactions', 0) > 0 or data.get('files', 0) > 0:
            embed.add_field(
                name="üîç –î–æ–¥–∞—Ç–∫–æ–≤–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
                value=(
                    f"**–†–µ–∞–∫—Ü—ñ—ó:** `{data.get('reactions', 0)}`\n" if data.get('reactions', 0) > 0 else ""
                    f"**–§–∞–π–ª–∏:** `{data.get('files', 0)}`" if data.get('files', 0) > 0 else ""
                ),
                inline=False
            )

        embed.set_image(url="attachment://graph.png")
        embed.set_footer(text=f"ID: {member.id} ‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–Ω–æ–≤–ª—é—î—Ç—å—Å—è —â–æ—Ö–≤–∏–ª–∏–Ω–∏")

        await inter.response.send_message(embed=embed, file=file)

    def create_futuristic_graph(self, member, data):
        """–°—Ç–≤–æ—Ä—é—î –ø–æ–∫—Ä–∞—â–µ–Ω–∏–π —Ñ—É—Ç—É—Ä–∏—Å—Ç–∏—á–Ω–∏–π –≥—Ä–∞—Ñ—ñ–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —Ä–µ–∞–ª—å–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏"""
        import io
        import matplotlib.pyplot as plt
        import matplotlib.patheffects as path_effects
        from matplotlib.dates import DateFormatter
        import matplotlib.dates as mdates
        from datetime import datetime, timedelta
        import numpy as np
        from matplotlib.colors import LinearSegmentedColormap
        from matplotlib.collections import LineCollection

        # –û—Ç—Ä–∏–º—É—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ 7 –¥–Ω—ñ–≤
        end_date = datetime.utcnow().date()
        dates = [end_date - timedelta(days=i) for i in range(6, -1, -1)]
        date_strs = [d.strftime("%Y-%m-%d") for d in dates]

        user_key = str(member.id)
        if user_key not in self.daily_activity:
            self.daily_activity[user_key] = {}

        # –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ –∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ: –±–µ—Ä–µ–º–æ –º–∞–∫—Å–∏–º—É–º –º—ñ–∂ –Ω–∞–∫–æ–ø–∏—á–µ–Ω–∏–º —É daily_activity —Ç–∞ –¥–∞–Ω–∏–º–∏ –∑ activity_data
        today_str = end_date.strftime("%Y-%m-%d")
        current_day_activity = data.get('today', 0)
        self.daily_activity[user_key][today_str] = max(self.daily_activity[user_key].get(today_str, 0), current_day_activity)

        # –§–æ—Ä–º—É—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è –≥—Ä–∞—Ñ—ñ–∫–∞ –ø–æ –∫–æ–∂–Ω–æ–º—É –¥–Ω—é
        values = [self.daily_activity[user_key].get(date_str, 0) for date_str in date_strs]

        # –Ø–∫—â–æ –≤—Å—ñ –∑–Ω–∞—á–µ–Ω–Ω—è —Ä—ñ–≤–Ω—ñ –Ω—É–ª—é, –∑–∞–¥–∞—î–º–æ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è –≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—ó
        if all(v == 0 for v in values):
            values = [0.0001] * 7

        plt.style.use('dark_background')
        fig = plt.figure(figsize=(12, 8), dpi=150)
        ax = fig.add_subplot(111)

        # –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –∫–æ–ª—å–æ—Ä—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        r, g, b = member.color.r / 255, member.color.g / 255, member.color.b / 255
        if member.color == disnake.Color.default():
            primary_color = (0.4, 0.2, 0.8)  # –§—ñ–æ–ª–µ—Ç–æ–≤–∏–π –¥–ª—è –¥–µ—Ñ–æ–ª—Ç–Ω–æ–≥–æ –∫–æ–ª—å–æ—Ä—É
        else:
            primary_color = (r, g, b)

        # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–µ–æ–Ω–æ–≤–∏–π –≥—Ä–∞–¥—ñ—î–Ω—Ç
        neon_cmap = LinearSegmentedColormap.from_list(
            'neon',
            [(0, (0.1, 0.1, 0.3)),
             (0.5, primary_color),
             (1, (1.0, 1.0, 1.0))]
        )

        fig.patch.set_facecolor('#000000')
        ax.set_facecolor('#070714')
        ax.grid(True, linestyle='-', alpha=0.2, color='#ffffff')
        for y in ax.get_yticks():
            ax.axhline(y=y, color='#3030a0', alpha=0.25, linestyle='-', linewidth=1)

        # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ —Ä—è–¥–∫–∏ –¥–∞—Ç —É datetime –¥–ª—è –ø–æ–±—É–¥–æ–≤–∏ –≥—Ä–∞—Ñ—ñ–∫–∞
        plot_dates = [datetime.strptime(date_str, "%Y-%m-%d") for date_str in date_strs]
        numeric_dates = mdates.date2num(plot_dates)
        points = np.array([numeric_dates, values]).T.reshape(-1, 1, 2)
        segments = np.concatenate([points[:-1], points[1:]], axis=1)
        norm = plt.Normalize(0, len(segments) - 1)

        # –ü–æ–±—É–¥–æ–≤–∞ –æ—Å–Ω–æ–≤–Ω–æ—ó –∫—Ä–∏–≤–æ—ó –∑ –ø–µ—Ä–µ–º—ñ–Ω–Ω–æ—é —à–∏—Ä–∏–Ω–æ—é
        lc = LineCollection(segments, cmap=neon_cmap, norm=norm, linewidth=6, alpha=0.9)
        lc.set_array(np.arange(len(segments)))
        ax.add_collection(lc)

        glow_line, = ax.plot(plot_dates, values, color=primary_color, linewidth=2, alpha=0.7)
        glow_line.set_path_effects([
            path_effects.SimpleLineShadow(offset=(0, 0), shadow_color=primary_color, alpha=0.8, rho=8),
            path_effects.SimpleLineShadow(offset=(0, 0), shadow_color='white', alpha=0.4, rho=12),
            path_effects.Normal()
        ])

        scatter = ax.scatter(plot_dates, values, s=150, color='white', alpha=1.0, zorder=5,
                             edgecolor=primary_color, linewidth=2.5)
        scatter.set_path_effects([
            path_effects.SimpleLineShadow(offset=(0, 0), shadow_color=primary_color, alpha=0.8, rho=8),
            path_effects.Normal()
        ])

        ax.fill_between(plot_dates, values, color=primary_color, alpha=0.3)
        ax.xaxis.set_major_formatter(plt.NullFormatter())
        ax.xaxis.set_major_locator(mdates.DayLocator(interval=1))

        def hours_formatter(x, pos):
            hours_int = int(x)
            minutes = int((x - hours_int) * 60)
            if hours_int == 0:
                return f'{minutes} —Ö–≤'
            return f'{hours_int} –≥–æ–¥ {minutes} —Ö–≤'

        ax.yaxis.set_major_formatter(plt.FuncFormatter(hours_formatter))
        ax.tick_params(axis='y', labelsize=14, colors='white', pad=10)

        y_max = max(max(values) * 1.3, 0.2)
        y_min = 0
        ax.set_ylim(y_min, y_max)

        def neon_text(text, x, y, **kwargs):
            text_obj = ax.text(x, y, text, **kwargs)
            text_obj.set_path_effects([
                path_effects.Stroke(linewidth=4, foreground=primary_color, alpha=0.7),
                path_effects.Normal()
            ])
            return text_obj

        neon_text(f'–ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å {member.display_name}', 0.5, 1.05,
                  fontsize=22, fontweight='bold', color='white', alpha=0.95,
                  transform=ax.transAxes, ha='center')

        for spine in ax.spines.values():
            spine.set_visible(False)

        for i, (d, v) in enumerate(zip(plot_dates, values)):
            hours = int(v)
            minutes = int((v - hours) * 60)
            time_str = f'{hours} –≥–æ–¥ {minutes} —Ö–≤' if hours > 0 else f'{minutes} —Ö–≤'
            text = ax.annotate(time_str, (d, v), textcoords="offset points",
                               xytext=(0, 25), ha='center', fontweight='bold', fontsize=14,
                               color='white', alpha=0.95)
            text.set_path_effects([
                path_effects.Stroke(linewidth=3, foreground=primary_color, alpha=0.7),
                path_effects.Normal()
            ])

        bottom_line = ax.axhline(y=y_min, color=primary_color, alpha=0.7, linewidth=2.5)
        bottom_line.set_path_effects([
            path_effects.SimpleLineShadow(offset=(0, 0), shadow_color=primary_color, alpha=0.7, rho=8),
            path_effects.Normal()
        ])

        weekdays = ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–ù–¥']
        for i, d in enumerate(plot_dates):
            weekday = weekdays[d.weekday()]
            ax.text(d, -y_max * 0.05, weekday,
                    ha='center', fontsize=16, color='white', alpha=1.0,
                    fontweight='bold')

        plt.subplots_adjust(bottom=0.15)
        buffer = io.BytesIO()
        plt.savefig(buffer, format='png', dpi=150, facecolor='#000000', edgecolor='none', bbox_inches='tight')
        buffer.seek(0)
        plt.close()
        return buffer

    def get_activity_rank(self, user_id):
        """–ü–æ–≤–µ—Ä—Ç–∞—î —Ä–µ–π—Ç–∏–Ω–≥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Å–µ—Ä–µ–¥ —É—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑–∞ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—é"""
        all_users = []
        for uid, data in self.activity_data.items():
            all_users.append((uid, data.get('total', 0)))
        all_users.sort(key=lambda x: x[1], reverse=True)
        for i, (uid, _) in enumerate(all_users):
            if uid == str(user_id):
                return i + 1
        return len(all_users) + 1


def setup(bot):
    bot.add_cog(EventsCog(bot))
